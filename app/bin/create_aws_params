#!/usr/bin/env bash

DEBUG=$DOCKER_DEBUG_MODE
if [ "$DEBUG" = '1' ]; then
    set -x
if

print_msg_and_exit() {
    local msg=${1:-}
    local exit_code=${2:-1}
    [ "$msg" = '' ] || echo -e "$msg"
    [ "$exit_code" != '' ] && exit $exit_code || return 0
}

if [ "$CI_PROJECT_NAME"       = '' \
   -o $REGISTRY_URL"          = '' \
   -o $AWS_DEFAULT_REGION"    = '' \
   -o $AWS_ACCESS_KEY_ID"     = '' \
   -o $AWS_SECRET_ACCESS_KEY" = '' \
]; then
    if [   "$GITLAB_PRIVATE_TOKEN" = '' \
        -o "$GITLAB_API_PATH"           = '' \
        -o "$CI_PROJECT_ID"             = '' \
        -o "$AUTH_CI_PROJECT_ID"        = '' \
    ]; then
        print_msg_and_exit "Error!!! Check values:\nGITLAB_PRIVATE_TOKEN, GITLAB_API_PATH, CI_PROJECT_ID, AUTH_CI_PROJECT_ID" 1
    fi
    cmd_token="curl -s --header 'PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN'"
    api_path="${GITLAB_API_PATH}/${CI_PROJECT_ID}"
    auth_api_path="${GITLAB_API_PATH}/${AUTH_CI_PROJECT_ID}"
fi

#CI_PROJECT_NAME
if [ "$CI_PROJECT_NAME" = '' ]; then
    var_name="CI_PROJECT_NAME"
    var_path="$api_path/"
    cmd="$cmd_token '$var_path'"
    CI_PROJECT_NAME=$(eval "$cmd" | jq -r '.name')
    [ "$CI_PROJECT_NAME" = '' ] && print_msg_and_exit "Error!!! Check value:\n$var_name" 1
fi

#REGISTRY_URL
if [ "$REGISTRY_URL" = '' ]; then
    var_name="REGISTRY_URL"
    var_path="$auth_api_path/variables/$var_name"
    cmd="$cmd_token '$var_path'"
    REGISTRY_URL=$(eval "$cmd" | jq -r '.value')
    [ "$REGISTRY_URL" = '' ] && print_msg_and_exit "Error!!! Check value:\n$var_name" 1
fi

#AWS_DEFAULT_REGION
if [ "$AWS_DEFAULT_REGION" = '' ]; then
    var_name="AWS_DEFAULT_REGION"
    var_path="$auth_api_path/variables/$var_name"
    cmd="$cmd_token '$var_path'"
    AWS_DEFAULT_REGION=$(eval "$cmd" | jq -r '.value')
    [ "$AWS_DEFAULT_REGION" = '' ] && print_msg_and_exit "Error!!! Check value:\n$var_name" 1
fi

#AWS_ACCESS_KEY_ID
if [ "$AWS_ACCESS_KEY_ID" = '' ]; then
    var_name="AWS_ACCESS_KEY_ID"
    var_path="$auth_api_path/variables/$var_name"
    cmd="$cmd_token '$var_path'"
    AWS_ACCESS_KEY_ID=$(eval "$cmd" | jq -r '.value')
    [ "$AWS_ACCESS_KEY_ID" = '' ] && print_msg_and_exit "Error!!! Check value:\n$var_name" 1
fi

#AWS_SECRET_ACCESS_KEY
if [ "$AWS_SECRET_ACCESS_KEY" = '' ]; then
    var_name="AWS_SECRET_ACCESS_KEY"
    var_path="$auth_api_path/variables/$var_name"
    cmd="$cmd_token '$var_path'"
    AWS_SECRET_ACCESS_KEY=$(eval "$cmd" | jq -r '.value')
    [ "$AWS_SECRET_ACCESS_KEY" = '' ] && print_msg_and_exit "Error!!! Check value:\n$var_name" 1
fi

cmd_aws="aws ecr get-login --no-include-email --region=$AWS_DEFAULT_REGION"
$(eval "$cmd_aws") || print_msg_and_exit "Error!!! Can't login:\n$cmd_aws" 1

REPO_EXISTS=$(aws ecr describe-repositories --query "repositories[?repositoryName=='$CI_PROJECT_NAME'].{repositoryName:repositoryName}" --output=text)
if [ "$REPO_EXISTS" = '' ]; then
    cmd_aws="aws ecr create-repository --repository-name=${CI_PROJECT_NAME} --output=table"
    $(eval "$cmd_aws") || print_msg_and_exit "Error!!! Can't create repository:\n$cmd_aws" 1
    REPO_EXISTS=
else
    echo "Docker registry ${CI_PROJECT_NAME} exists"
    REPO_EXISTS=1
fi

export CI_PROJECT_NAME
export AWS_DEFAULT_REGION
export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY
export REPO_EXISTS
export REGISTRY_URL
export REGISTRY_IMAGE_NAME=$REGISTRY_URL/$CI_PROJECT_NAME
export IMAGE_TAG_LATEST=${REGISTRY_IMAGE_NAME}:${DOCKER_TAG_LATEST:-latest}
